// Code generated by MockGen. DO NOT EDIT.
// Source: check.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/horizoncd/horizon/core/common"
	models "github.com/horizoncd/horizon/pkg/pr/models"
)

// MockCheckManager is a mock of CheckManager interface.
type MockCheckManager struct {
	ctrl     *gomock.Controller
	recorder *MockCheckManagerMockRecorder
}

// MockCheckManagerMockRecorder is the mock recorder for MockCheckManager.
type MockCheckManagerMockRecorder struct {
	mock *MockCheckManager
}

// NewMockCheckManager creates a new mock instance.
func NewMockCheckManager(ctrl *gomock.Controller) *MockCheckManager {
	mock := &MockCheckManager{ctrl: ctrl}
	mock.recorder = &MockCheckManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckManager) EXPECT() *MockCheckManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCheckManager) Create(ctx context.Context, check *models.Check) (*models.Check, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, check)
	ret0, _ := ret[0].(*models.Check)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCheckManagerMockRecorder) Create(ctx, check interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCheckManager)(nil).Create), ctx, check)
}

// CreateCheckRun mocks base method.
func (m *MockCheckManager) CreateCheckRun(ctx context.Context, checkRun *models.CheckRun) (*models.CheckRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheckRun", ctx, checkRun)
	ret0, _ := ret[0].(*models.CheckRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCheckRun indicates an expected call of CreateCheckRun.
func (mr *MockCheckManagerMockRecorder) CreateCheckRun(ctx, checkRun interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheckRun", reflect.TypeOf((*MockCheckManager)(nil).CreateCheckRun), ctx, checkRun)
}

// GetByResource mocks base method.
func (m *MockCheckManager) GetByResource(ctx context.Context, resources ...common.Resource) ([]*models.Check, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range resources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByResource", varargs...)
	ret0, _ := ret[0].([]*models.Check)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByResource indicates an expected call of GetByResource.
func (mr *MockCheckManagerMockRecorder) GetByResource(ctx interface{}, resources ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, resources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByResource", reflect.TypeOf((*MockCheckManager)(nil).GetByResource), varargs...)
}

// GetCheckRunByID mocks base method.
func (m *MockCheckManager) GetCheckRunByID(ctx context.Context, checkRunID uint) (*models.CheckRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckRunByID", ctx, checkRunID)
	ret0, _ := ret[0].(*models.CheckRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckRunByID indicates an expected call of GetCheckRunByID.
func (mr *MockCheckManagerMockRecorder) GetCheckRunByID(ctx, checkRunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckRunByID", reflect.TypeOf((*MockCheckManager)(nil).GetCheckRunByID), ctx, checkRunID)
}

// ListCheckRuns mocks base method.
func (m *MockCheckManager) ListCheckRuns(ctx context.Context, pipelinerunID uint) ([]*models.CheckRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckRuns", ctx, pipelinerunID)
	ret0, _ := ret[0].([]*models.CheckRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCheckRuns indicates an expected call of ListCheckRuns.
func (mr *MockCheckManagerMockRecorder) ListCheckRuns(ctx, pipelinerunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckRuns", reflect.TypeOf((*MockCheckManager)(nil).ListCheckRuns), ctx, pipelinerunID)
}

// UpdateByID mocks base method.
func (m *MockCheckManager) UpdateByID(ctx context.Context, checkRunID uint, newCheckRun *models.CheckRun) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, checkRunID, newCheckRun)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockCheckManagerMockRecorder) UpdateByID(ctx, checkRunID, newCheckRun interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockCheckManager)(nil).UpdateByID), ctx, checkRunID, newCheckRun)
}
