# Copyright Â© 2023 Horizoncd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: 3.0.2
info:
  title: Horizon-Template-Restful
  description: Restful API for managing templates
  version: 2.0.0
servers:
  - url: 'http://localhost:8080/'
paths:
  /apis/core/v2/groups/{groupID}/templates:
    parameters:
      - name: groupID
        in: path
        description: id of group
        required: true
        schema:
          type: number
    post:
      tags:
        - template
      operationId: createTemplate
      summary: Create a template under specified group by group ID
      description: |
        Create a template under specified group by group ID. User must create a release when creating template, or the template would be useless.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                repository:
                  type: string
                token:
                  type: string
                release:
                  type: object
                  properties:
                    tag:
                      type: string
                    isRecommend:
                      type: boolean
                    description:
                      type: string

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v2/templates:
    get:
      tags:
        - template
      summary: Retrieve a list of templates
      operationId: listTemplates
      parameters:
        - name: userID
          description: The ID of the user to filter by
          in: query
          schema:
            type: integer
        - name: groupID
          description: The ID of the group to filter by
          in: query
          schema:
            type: number
        - name: filter
          description: The name of the template to filter by
          in: query
          schema:
            type: string
        - name: pageNumber
          description: The page number to retrieve
          in: query
          schema:
            type: number
        - name: pageSize
          description: The number of items per page
          in: query
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                        description: The total number of templates that match the provided filters.
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: The unique ID of the template.
                            name:
                              type: string
                              description: The name of the template.
                            chartName:
                              type: string
                              description: The name of the chart associated with the template.
                            description:
                              type: string
                              description: A description of the template.
                            repository:
                              type: string
                              description: The repository where the template is stored.
                            group:
                              type: integer
                              description: The group associated with the template.
                            onlyOwner:
                              type: boolean
                              description: Whether the template is only visible to the owner.
                            createdAt:
                              type: string
                              description: The timestamp of when the template was created.
                              format: date-time
                            updatedAt:
                              type: string
                              description: The timestamp of when the template was last updated.
                              format: date-time
                            createdBy:
                              type: integer
                              description: The ID of the user who created the template.
                            updatedBy:
                              type: integer
                              description: The ID of the user who last updated the template.


  /apis/core/v2/templates/{template}:
    parameters:
      - name: template
        in: path
        description: id of template
        required: true
        schema:
          type: integer

    get:
      tags:
        - template
      operationId: getTemplate
      summary: Get the specified template
      description: |
        Get the specified template by template ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: id of template
                      name:
                        type: string
                        description: the name of template
                      description:
                        type: string
                        description: description of template
                      repository:
                        type: string
                        description: user-set gitlab url of tempalte
                      group:
                        type: integer
                        description: which group template belongs to
                      createBy:
                        type: integer
                        description: the creator of the template
                      updateBy:
                        type: integer
                        description: the user who updated the template
                        default:
                          description: Unexpected error
                          content:
                            application/json:
                              schema:
                                $ref: "common.yaml#/components/schemas/Error"
    put:
      tags:
        - template
      operationId: updateTemplate
      summary: Update the specified template
      description: |
        Update the specified template by template ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                repository:
                  type: string
                  description: gitlab url of template repo
                token:
                  type: string
                  description: gitlab token to access the template repo
                description:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

    delete:
      tags:
        - template
      operationId: deleteTemplate
      summary: Delete the specified template
      description: |
        Delete the specified template by template ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

    post:
      tags:
        - release
      operationId: createRelease
      summary: Create release for specified template by template ID
      description: |
        Create release for specified template by template ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag:
                  type: string
                  description: tag in gitlab, it will also be release name
                isRecommend:
                  type: boolean
                description:
                  type: string

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"


  /apis/core/v2/templates/{templateID}/releases:
    parameters:
      - name: templateID
        in: path
        description: id of template
        required: true
        schema:
          type: string
    get:
      tags:
        - release
      operationId: listTemplateReleases
      summary: List releases for a specified template
      description: |
        List releases for a specified template. Maybe there are so many releases
        for a template, but this API will only return 3 recently releases. And the most
        recently release is the most recommended release.
      responses:
        '200':

          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: the template release name
                        description:
                          type: string
                          description: the template release description
                        recommended:
                          type: boolean
                          description: is the most recommended release
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"


  /apis/core/v2/templatereleases/{release}:
    parameters:
      - name: release
        in: path
        description: id of release
        required: true
        schema:
          type: number
    get:
      tags:
        - release
      operationId: getRelease
      summary: Get the specified release by release ID
      description: |
        Get the specified release by release ID.

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        description: the template release name
                      description:
                        type: string
                        description: the template release description
                      recommended:
                        type: boolean
                        description: is the most recommended release

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

    put:
      tags:
        - release
      operationId: updateRelease
      summary: Get the specified release by release ID
      description: |
        Get the specified release by release ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isRecommend:
                  type: boolean
                description:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object


        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

    delete:
      tags:
        - release
      operationId: deleteRelease
      summary: Delete the specified release by release ID
      description: |
        Delete the specified release by release ID.

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object


        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v2/templatereleases/{release}/sync:
    parameters:
      - name: release
        in: path
        description: id of release
        required: true
        schema:
          type: number
    post:
      tags:
        - release
      operationId: syncReleaseToRepo
      summary: Upload the specified release to repo(such as harbor)
      description: |
        Upload the specified release to repo(such as harbor).
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v2/templatereleases/{releaseID}/schema:
    parameters:
      - name: releaseID
        in: path
        description: id of release
        required: true
        schema:
          type: string
    get:
      tags:
        - release
      operationId: getTemplateInputSchema
      summary: Get input schema for a specified template
      description: |
        Get input schema for a specified template. This API will return the template's cd.schema.json file and ci.schema.json file.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data":{
                          "application":{
                              "jsonSchema":{
                                  "properties":{
                                      "app":{
                                          "properties":{
                                              "health":{
                                                  "dependencies":{
                                                      "check":[
                                                          "port"
                                                      ],
                                                      "offline":[
                                                          "port"
                                                      ],
                                                      "online":[
                                                          "port"
                                                      ],
                                                      "status":[
                                                          "port"
                                                      ]
                                                  },
                                                  "properties":{
                                                      "check":{
                                                          "description":"å­æ´»ç¶æä¼å¨åºç¨è¿è¡æé´æ£æµåºç¨å¥åº·æåµï¼æ£æµå¤±è´¥æ¶ä¼å¯¹åºç¨è¿è¡éå¯",
                                                          "pattern":"^/.*$",
                                                          "title":"å­æ´»ç¶æ",
                                                          "type":"string"
                                                      },
                                                      "offline":{
                                                          "description":"ä¸çº¿æ¥å£ä¼å¨åºç¨åæ­¢ä¹åè¿è¡è°ç¨ï¼å¦æè°ç¨å¤±è´¥ï¼åå¿½ç¥",
                                                          "pattern":"^/.*$",
                                                          "title":"ä¸çº¿",
                                                          "type":"string"
                                                      },
                                                      "online":{
                                                          "description":"ä¸çº¿æ¥å£ä¼å¨åºç¨å¯å¨ä¹åè¿è¡è°ç¨ï¼å¦æè°ç¨å¤±è´¥ï¼ååºç¨å¯å¨å¤±è´¥",
                                                          "pattern":"^/.*$",
                                                          "title":"ä¸çº¿",
                                                          "type":"string"
                                                      },
                                                      "port":{
                                                          "maximum":65535,
                                                          "minimum":1024,
                                                          "type":"integer"
                                                      },
                                                      "status":{
                                                          "description":"å°±ç»ªç¶æä¼å¨åºç¨è¿è¡æé´æ£æµåºç¨æ¯å¦å¤äºä¸çº¿ç¶æï¼æ£æµå¤±è´¥æ¶æ¾ç¤ºä¸çº¿ç¶æ",
                                                          "pattern":"^/.*$",
                                                          "title":"å°±ç»ªç¶æ",
                                                          "type":"string"
                                                      }
                                                  },
                                                  "title":"å¥åº·æ£æ¥",
                                                  "type":"object"
                                              },
                                              "params":{
                                                  "properties":{
                                                      "jvmExtra":{
                                                          "type":"string"
                                                      },
                                                      "mainClassName":{
                                                          "type":"string"
                                                      },
                                                      "xdebugAddress":{
                                                          "pattern":"^\\d*$",
                                                          "type":"string"
                                                      },
                                                      "xms":{
                                                          "default":"512",
                                                          "pattern":"^\\d*$",
                                                          "type":"string"
                                                      },
                                                      "xmx":{
                                                          "default":"512",
                                                          "pattern":"^\\d*$",
                                                          "type":"string"
                                                      }
                                                  },
                                                  "required":[
                                                      "mainClassName"
                                                  ],
                                                  "title":"åæ°",
                                                  "type":"object"
                                              },
                                              "spec":{
                                                  "properties":{
                                                      "replicas":{
                                                          "title":"å¯æ¬æ°",
                                                          "type":"integer"
                                                      },
                                                      "resource":{
                                                          "oneOf":[
                                                              {
                                                                  "enum":[
                                                                      "x-small"
                                                                  ],
                                                                  "title":"x-small(1C2G)"
                                                              },
                                                              {
                                                                  "enum":[
                                                                      "small"
                                                                  ],
                                                                  "title":"small(2C4G)"
                                                              },
                                                              {
                                                                  "enum":[
                                                                      "middle"
                                                                  ],
                                                                  "title":"middle(4C8G)"
                                                              },
                                                              {
                                                                  "enum":[
                                                                      "large"
                                                                  ],
                                                                  "title":"large(8C16G)"
                                                              },
                                                              {
                                                                  "enum":[
                                                                      "x-large"
                                                                  ],
                                                                  "title":"x-large(16C32G)"
                                                              }
                                                          ],
                                                          "title":"è§æ ¼",
                                                          "type":"string"
                                                      }
                                                  },
                                                  "title":"è§æ ¼",
                                                  "type":"object"
                                              },
                                              "strategy":{
                                                  "properties":{
                                                      "pauseType":{
                                                          "oneOf":[
                                                              {
                                                                  "enum":[
                                                                      "first"
                                                                  ],
                                                                  "title":"ç¬¬ä¸æ¹æå"
                                                              },
                                                              {
                                                                  "enum":[
                                                                      "all"
                                                                  ],
                                                                  "title":"å¨é¨æå"
                                                              },
                                                              {
                                                                  "enum":[
                                                                      "none"
                                                                  ],
                                                                  "title":"å¨ä¸æå"
                                                              }
                                                          ],
                                                          "title":"æåç­ç¥",
                                                          "type":"string"
                                                      },
                                                      "stepsTotal":{
                                                          "enum":[
                                                              1,
                                                              2,
                                                              3,
                                                              4,
                                                              5
                                                          ],
                                                          "title":"åå¸æ¹æ¬¡ï¼å¤æ¹æ¬¡æåµä¸ï¼ç¬¬ä¸æ¹é»è®¤ä¸º1ä¸ªå®ä¾ï¼",
                                                          "type":"integer"
                                                      }
                                                  },
                                                  "title":"åå¸ç­ç¥",
                                                  "type":"object"
                                              }
                                          },
                                          "title":"",
                                          "type":"object"
                                      }
                                  },
                                  "type":"object"
                              },
                              "uiSchema":{
                                  "app":{
                                      "health":{
                                          "check":{
                                              "ui:placeholder":"å¦: /api/test"
                                          },
                                          "offline":{
                                              "ui:placeholder":"å¦: /health/offline"
                                          },
                                          "online":{
                                              "ui:placeholder":"å¦: /health/online"
                                          },
                                          "status":{
                                              "ui:placeholder":"å¦: /health/status"
                                          },
                                          "ui:order":[
                                              "port",
                                              "check",
                                              "status",
                                              "online",
                                              "offline"
                                          ]
                                      },
                                      "params":{
                                          "ui:order":[
                                              "mainClassName",
                                              "*",
                                              "xdebugAddress"
                                          ]
                                      },
                                      "ui:order":[
                                          "spec",
                                          "strategy",
                                          "params",
                                          "health"
                                      ]
                                  }
                              }
                          },
                          "pipeline":{
                              "jsonSchema":{
                                  "properties":{
                                      "buildxml":{
                                          "default":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE project [<!ENTITY buildfile SYSTEM \"file:./build-user.xml\">]>\n<project basedir=\".\" default=\"deploy\" name=\"demo\">\n    <property name=\"ant\" value=\"ant\" />\n    <property name=\"baseline.dir\" value=\"${basedir}\"/>\n\n    <target name=\"package\">\n        <exec dir=\"${baseline.dir}\" executable=\"${ant}\" failonerror=\"true\">\n            <arg line=\"-buildfile overmind_build.xml -Denv=test -DenvName=mockserver.org\"/>\n        </exec>\n    </target>\n\n    <target name=\"deploy\">\n        <echo message=\"begin auto deploy......\"/>\n        <antcall target=\"package\"/>\n    </target>\n</project>",
                                          "title":"build.xml",
                                          "type":"string"
                                      }
                                  },
                                  "title":"Ant",
                                  "type":"object"
                              },
                              "uiSchema":{
                                  "buildxml":{
                                      "ui:options":{
                                          "rows":18
                                      },
                                      "ui:widget":"textarea"
                                  }
                              }
                          }
                      }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
