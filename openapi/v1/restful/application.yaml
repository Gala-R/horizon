# Copyright Â© 2023 Horizoncd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: 3.0.1
info:
  title: Horizon-Application-Restful
  version: 1.0.0
servers:
  - url: 'http://localhost:8080/'
paths:
  /apis/core/v1/groups/{groupID}/applications:
    parameters:
      - name: groupID
        in: path
        description: group id
        schema:
          type: integer
          format: int64
        required: true
      - name: extraOwner
        in: query
        description: extra owner's email
        schema:
          type: string
        required: false
    post:
      tags:
        - application
      operationId: createApplication
      summary: create a application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: |
                {
                    "//name":"name is unique in the whole system, should satisfy the regex pattern: ^[a-z][a-z0-9-]*[a-z]$. And the length of name must less than 53",
                    "name":"app",
                    "description":"xxxxxxxxxxxx",
                    "priority":"P0",
                    "git":{
                        "url":"ssh://git@g.hz.netease.com:22222/music-cloud-native/horizon/horizon.git",
                        "subfolder":"/",
                        "branch":"develop"
                    },

                    "template":{
                        "name":"javaapp",
                        "release":"v1.1.0"
                    },
                    "templateInput":{
                        "application":{
                            "app":{
                                "spec":{
                                    "replicas":1,
                                    "resource":"small"
                                },
                                "strategy":{
                                    "stepsTotal":1,
                                    "pauseType":"first"
                                },
                                "params":{
                                    "xmx":"512",
                                    "xms":"512",
                                    "maxPerm":"128",
                                    "mainClassName":"com.netease.horizon.WebApplication",
                                    "jvmExtra":"-Dserver.port=8080"
                                },
                                "health":{
                                    "check":"/api/test",
                                    "status":"/health/status",
                                    "online":"/health/online",
                                    "offline":"/health/offline",
                                    "port":8080
                                }
                            }
                        },
                        "pipeline":{
                            "buildxml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE project [<!ENTITY buildfile SYSTEM \"file:./build-user.xml\">]>\n<project basedir=\".\" default=\"deploy\" name=\"demo\">\n    <property name=\"ant\" value=\"ant\" />\n    <property name=\"baseline.dir\" value=\"${basedir}\"/>\n\n    <target name=\"package\">\n        <exec dir=\"${baseline.dir}\" executable=\"${ant}\" failonerror=\"true\">\n            <arg line=\"-buildfile overmind_build.xml -Denv=test -DenvName=mockserver.org\"/>\n        </exec>\n    </target>\n\n    <target name=\"deploy\">\n        <echo message=\"begin auto deploy......\"/>\n        <antcall target=\"package\"/>\n    </target>\n</project>"
                        }
                    }
                }
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data":{
                          "id": 1,
                          "name":"app",
                          "groupID":1000,
                          "fullPath": "/a/b/c",
                          "description":"xxxxxxxxxxxx",
                          "priority":"P0",
                          "template":{
                              "name":"javaapp",
                              "release":"v1.1.0"
                          },
                          "git":{
                              "url":"ssh://git@g.hz.netease.com:22222/music-cloud-native/horizon/horizon.git",
                              "subfolder":"/",
                              "branch":"develop"
                          },
                          "templateInput":{
                              "application":{
                                  "app":{
                                      "spec":{
                                          "replicas":1,
                                          "resource":"small"
                                      },
                                      "strategy":{
                                          "stepsTotal":1,
                                          "pauseType":"first"
                                      },
                                      "params":{
                                          "xmx":"512",
                                          "xms":"512",
                                          "maxPerm":"128",
                                          "mainClassName":"com.netease.horizon.WebApplication",
                                          "jvmExtra":"-Dserver.port=8080"
                                      },
                                      "health":{
                                          "check":"/api/test",
                                          "status":"/health/status",
                                          "online":"/health/online",
                                          "offline":"/health/offline",
                                          "port":8080
                                      }
                                  }
                              },
                              "pipeline":{
                                  "buildxml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE project [<!ENTITY buildfile SYSTEM \"file:./build-user.xml\">]>\n<project basedir=\".\" default=\"deploy\" name=\"demo\">\n    <property name=\"ant\" value=\"ant\" />\n    <property name=\"baseline.dir\" value=\"${basedir}\"/>\n\n    <target name=\"package\">\n        <exec dir=\"${baseline.dir}\" executable=\"${ant}\" failonerror=\"true\">\n            <arg line=\"-buildfile overmind_build.xml -Denv=test -DenvName=mockserver.org\"/>\n        </exec>\n    </target>\n\n    <target name=\"deploy\">\n        <echo message=\"begin auto deploy......\"/>\n        <antcall target=\"package\"/>\n    </target>\n</project>"
                              }
                          }
                      }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
  /apis/core/v1/applications/{applicationID}:
    parameters:
      - name: applicationID
        in: path
        description: id of application
        required: true
    put:
      tags:
        - application
      operationId: updateApplication
      summary: update a application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: |
                {
                    "description":"xxxxxxxxxxxx",
                    "priority":"P0",
                    "template":{
                        "name":"javaapp",
                        "release":"v1.1.0"
                    },
                    "git":{
                        "url":"ssh://git@g.hz.netease.com:22222/music-cloud-native/horizon/horizon.git",
                        "subfolder":"/",
                        "branch":"develop"
                    },
                    "templateInput":{
                        "application":{
                            "app":{
                                "spec":{
                                    "replicas":1,
                                    "resource":"small"
                                },
                                "strategy":{
                                    "stepsTotal":1,
                                    "pauseType":"first"
                                },
                                "params":{
                                    "xmx":"512",
                                    "xms":"512",
                                    "maxPerm":"128",
                                    "mainClassName":"com.netease.horizon.WebApplication",
                                    "jvmExtra":"-Dserver.port=8080"
                                },
                                "health":{
                                    "check":"/api/test",
                                    "status":"/health/status",
                                    "online":"/health/online",
                                    "offline":"/health/offline",
                                    "port":8080
                                }
                            }
                        },
                        "pipeline":{
                            "buildxml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE project [<!ENTITY buildfile SYSTEM \"file:./build-user.xml\">]>\n<project basedir=\".\" default=\"deploy\" name=\"demo\">\n    <property name=\"ant\" value=\"ant\" />\n    <property name=\"baseline.dir\" value=\"${basedir}\"/>\n\n    <target name=\"package\">\n        <exec dir=\"${baseline.dir}\" executable=\"${ant}\" failonerror=\"true\">\n            <arg line=\"-buildfile overmind_build.xml -Denv=test -DenvName=mockserver.org\"/>\n        </exec>\n    </target>\n\n    <target name=\"deploy\">\n        <echo message=\"begin auto deploy......\"/>\n        <antcall target=\"package\"/>\n    </target>\n</project>"
                        }
                    }
                }
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data":{
                          "id": 1,
                          "name":"app",
                          "groupID":1000,
                          "fullPath": "/a/b/c",
                          "description":"xxxxxxxxxxxx",
                          "priority":"P0",
                          "template":{
                              "name":"javaapp",
                              "release":"v1.1.0"
                          },
                          "git":{
                              "url":"ssh://git@g.hz.netease.com:22222/music-cloud-native/horizon/horizon.git",
                              "subfolder":"/",
                              "branch":"develop"
                          },
                          "templateInput":{
                              "application":{
                                  "app":{
                                      "spec":{
                                          "replicas":1,
                                          "resource":"small"
                                      },
                                      "strategy":{
                                          "stepsTotal":1,
                                          "pauseType":"first"
                                      },
                                      "params":{
                                          "xmx":"512",
                                          "xms":"512",
                                          "maxPerm":"128",
                                          "mainClassName":"com.netease.horizon.WebApplication",
                                          "jvmExtra":"-Dserver.port=8080"
                                      },
                                      "health":{
                                          "check":"/api/test",
                                          "status":"/health/status",
                                          "online":"/health/online",
                                          "offline":"/health/offline",
                                          "port":8080
                                      }
                                  }
                              },
                              "pipeline":{
                                  "buildxml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE project [<!ENTITY buildfile SYSTEM \"file:./build-user.xml\">]>\n<project basedir=\".\" default=\"deploy\" name=\"demo\">\n    <property name=\"ant\" value=\"ant\" />\n    <property name=\"baseline.dir\" value=\"${basedir}\"/>\n\n    <target name=\"package\">\n        <exec dir=\"${baseline.dir}\" executable=\"${ant}\" failonerror=\"true\">\n            <arg line=\"-buildfile overmind_build.xml -Denv=test -DenvName=mockserver.org\"/>\n        </exec>\n    </target>\n\n    <target name=\"deploy\">\n        <echo message=\"begin auto deploy......\"/>\n        <antcall target=\"package\"/>\n    </target>\n</project>"
                              }
                          }
                      }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
    get:
      tags:
      - application
      operationId: getApplication
      summary: get a application
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data":{
                          "id": 1,
                          "name":"app",
                          "groupID":1000,
                          "fullPath": "/a/b/c",
                          "description":"xxxxxxxxxxxx",
                          "priority":"P0",
                          "template":{
                              "name":"javaapp",
                              "release":"v1.1.0"
                          },
                          "git":{
                              "url":"ssh://git@g.hz.netease.com:22222/music-cloud-native/horizon/horizon.git",
                              "subfolder":"/",
                              "branch":"develop"
                          },
                          "templateInput":{
                              "application":{
                                  "app":{
                                      "spec":{
                                          "replicas":1,
                                          "resource":"small"
                                      },
                                      "strategy":{
                                          "stepsTotal":1,
                                          "pauseType":"first"
                                      },
                                      "params":{
                                          "xmx":"512",
                                          "xms":"512",
                                          "maxPerm":"128",
                                          "mainClassName":"com.netease.horizon.WebApplication",
                                          "jvmExtra":"-Dserver.port=8080"
                                      },
                                      "health":{
                                          "check":"/api/test",
                                          "status":"/health/status",
                                          "online":"/health/online",
                                          "offline":"/health/offline",
                                          "port":8080
                                      }
                                  }
                              },
                              "pipeline":{
                                  "buildxml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE project [<!ENTITY buildfile SYSTEM \"file:./build-user.xml\">]>\n<project basedir=\".\" default=\"deploy\" name=\"demo\">\n    <property name=\"ant\" value=\"ant\" />\n    <property name=\"baseline.dir\" value=\"${basedir}\"/>\n\n    <target name=\"package\">\n        <exec dir=\"${baseline.dir}\" executable=\"${ant}\" failonerror=\"true\">\n            <arg line=\"-buildfile overmind_build.xml -Denv=test -DenvName=mockserver.org\"/>\n        </exec>\n    </target>\n\n    <target name=\"deploy\">\n        <echo message=\"begin auto deploy......\"/>\n        <antcall target=\"package\"/>\n    </target>\n</project>"
                              }
                          }
                      }
                  }
    delete:
      tags:
        - application
      operationId: deleteApplication
      summary: delete a application
      responses:
        '200':
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
  /apis/core/v1/applications/{applicationID}/envtemplates:
    parameters:
      - name: applicationID
        in: path
        description: application id
        required: true
      - name: environment
        in: query
        description: environment
        required: true
    post:
      tags:
        - application
      operationId: updateEnvTemplate
      summary: update a specified env template for an application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: |
                {
                    "application":{
                        "app":{
                            "spec":{
                                "replicas":1,
                                "resource":"small"
                            },
                            "strategy":{
                                "stepsTotal":1,
                                "pauseType":"first"
                            },
                            "params":{
                                "xmx":"512",
                                "xms":"512",
                                "maxPerm":"128",
                                "mainClassName":"com.netease.horizon.WebApplication",
                                "jvmExtra":"-Dserver.port=8080"
                            },
                            "health":{
                                "check":"/api/test",
                                "status":"/health/status",
                                "online":"/health/online",
                                "offline":"/health/offline",
                                "port":8080
                            }
                        }
                    },
                    "pipeline":{
                        "buildxml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE project [<!ENTITY buildfile SYSTEM \"file:./build-user.xml\">]>\n<project basedir=\".\" default=\"deploy\" name=\"demo\">\n    <property name=\"ant\" value=\"ant\" />\n    <property name=\"baseline.dir\" value=\"${basedir}\"/>\n\n    <target name=\"package\">\n        <exec dir=\"${baseline.dir}\" executable=\"${ant}\" failonerror=\"true\">\n            <arg line=\"-buildfile overmind_build.xml -Denv=test -DenvName=mockserver.org\"/>\n        </exec>\n    </target>\n\n    <target name=\"deploy\">\n        <echo message=\"begin auto deploy......\"/>\n        <antcall target=\"package\"/>\n    </target>\n</project>"
                    }
                }
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
    get:
      tags:
        - application
      operationId: getEnvTemplate
      summary: get a specified env template for an application
      description: if template for specified env is not exists, return the default template of this application.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data":{
                          "application":{
                              "app":{
                                  "spec":{
                                      "replicas":1,
                                      "resource":"small"
                                  },
                                  "strategy":{
                                      "stepsTotal":1,
                                      "pauseType":"first"
                                  },
                                  "params":{
                                      "xmx":"512",
                                      "xms":"512",
                                      "maxPerm":"128",
                                      "mainClassName":"com.netease.horizon.WebApplication",
                                      "jvmExtra":"-Dserver.port=8080"
                                  },
                                  "health":{
                                      "check":"/api/test",
                                      "status":"/health/status",
                                      "online":"/health/online",
                                      "offline":"/health/offline",
                                      "port":8080
                                  }
                              }
                          },
                          "pipeline":{
                              "buildxml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE project [<!ENTITY buildfile SYSTEM \"file:./build-user.xml\">]>\n<project basedir=\".\" default=\"deploy\" name=\"demo\">\n    <property name=\"ant\" value=\"ant\" />\n    <property name=\"baseline.dir\" value=\"${basedir}\"/>\n\n    <target name=\"package\">\n        <exec dir=\"${baseline.dir}\" executable=\"${ant}\" failonerror=\"true\">\n            <arg line=\"-buildfile overmind_build.xml -Denv=test -DenvName=mockserver.org\"/>\n        </exec>\n    </target>\n\n    <target name=\"deploy\">\n        <echo message=\"begin auto deploy......\"/>\n        <antcall target=\"package\"/>\n    </target>\n</project>"
                          }
                      }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
  /apis/core/v1/applications/{applicationID}/transfer:
    parameters:
      - name: applicationID
        in: path
        description: application id
        required: true
      - name: groupID
        in: query
        description: The id of the group that the application transfers to.
        required: true
  /apis/core/v1/applications/{applicationID}/defaultregions:
    parameters:
      - name: applicationID
        in: path
        description: application id
        required: true
    get:
      tags:
        - application
      operationId: getApplicationDefaultRegions
      summary: get default regions for an application
      description: |
        There are different regions for different environments. If the region of an environment is not exists,
        return the default region of this environment.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data": [
                        {
                          "environment": "test",
                          "region": "hz-test"
                        }, {
                          "environment": "pre",
                          "region": "hz"
                        }
                      ]
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
    post:
      tags:
        - application
      operationId: updateApplicationDefaultRegions
      summary: update the default regions for an application.
      description: |
        Update the default regions for an application.
        The update operation using database upsert function, if the environment exists for this application,
        it will update the region, and if not, it will add this environment-region pair for this application.
        The most import, if the request body is empty, it will delete all environment-region pairs for this application.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: |
                [
                  {
                    "environment": "test",
                    "region": "hz-test"
                  }, {
                    "environment": "pre",
                    "region": "hz"
                  }
                ]
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
  /apis/core/v1/applications/{applicationID}/selectableregions:
    parameters:
      - name: applicationID
        in: path
        description: application id
        required: true
      - name: env
        in: query
        description: enviroment name
        required: env
    get:
      tags:
        - application
      operationId: listSelectableRegions
      summary: list selectable regions of a application
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data":[
                          {
                              "name": "hz",
                              "displayName": "ä¹æ¡¥",
                              "disabled": false,
                              "isDefault": true
                          },
                          {
                              "name": "dg",
                              "displayName": "ä¸å ",
                              "disabled": false,
                              "isDefault": false
                          },
                          {
                              "name": "eks",
                              "displayName": "æµ·å¤EKS",
                              "disabled": false,
                              "isDefault": false
                          }
                      ]
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
  /apis/core/v1/applications/{applicationID}/pipelinestats:
    get:
      tags:
        - pipelinestats
      operationId: getPipelineStats
      summary: get pipeline stats
      parameters:
        - name: cluster
          in: query
        - name: pageNumber
          in: query
        - name: pageSize
          in: query
      responses:
        '200':
          description: Succuss
          content:
            application/json:
              schema:
                example: |
                  {
                    "data":
                      {
                        "total": 3,
                        "items":
                          [
                            {
                              "application": "sph",
                              "cluster": "sph-sphtesttt",
                              "pipeline": "horizon-pipeline",
                              "result": "ok",
                              "duration": 38,
                              "tasks":
                                [
                                  {
                                    "task": "build",
                                    "result": "ok",
                                    "duration": 26,
                                    "steps":
                                      [
                                        {
                                          "step": "git",
                                          "result": "ok",
                                          "duration": 0
                                        },
                                        {
                                          "step": "compile",
                                          "result": "ok",
                                          "duration": 6
                                        },
                                        {
                                          "step": "image",
                                          "result": "ok",
                                          "duration": 14
                                        }
                                      ]
                                  },
                                  {
                                    "task": "deploy",
                                    "result": "ok",
                                    "duration": 12,
                                    "steps":
                                      [
                                        {
                                          "step": "deploy",
                                          "result": "ok",
                                          "duration": 6
                                        }
                                      ]
                                  }
                                ],
                              "startedAt": "2022-09-21T11:05:26+08:00"
                            },
                            {
                              "application": "sph",
                              "cluster": "sph-sphtesttt",
                              "pipeline": "horizon-pipeline",
                              "result": "failed",
                              "duration": 8,
                              "tasks":
                                [
                                  {
                                    "task": "build",
                                    "result": "failed",
                                    "duration": 8,
                                    "steps":
                                      [
                                        {
                                          "step": "git",
                                          "result": "ok",
                                          "duration": 0
                                        },
                                        {
                                          "step": "compile",
                                          "result": "failed",
                                          "duration": 0
                                        }
                                      ]
                                  }
                                ],
                              "startedAt": "2022-09-21T11:04:58+08:00"
                            },
                            {
                              "application": "sph",
                              "cluster": "sph-sphtesttt",
                              "pipeline": "horizon-pipeline",
                              "result": "failed",
                              "duration": 7,
                              "tasks":
                                [
                                  {
                                    "task": "jib-build",
                                    "result": "failed",
                                    "duration": 7,
                                    "steps":
                                      [
                                        {
                                          "step": "jib-compile",
                                          "result": "failed",
                                          "duration": 1
                                        }
                                      ]
                                  }
                                ],
                              "startedAt": "2022-09-21T11:04:01+08:00"
                            }
                          ]
                      }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "../core.yaml#/components/schemas/Error"
  /apis/core/v1/applications:
    get:
      description: list applications
      operationId: listApps
      parameters:
        - name: filter
          in: query
          schema:
            type: string
        - name: userID
          in: query
          schema:
            type: number
        - name: pageNumber
          in: query
          schema:
            type: number
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          schema: 
            type: number
            minimum: 0
            default: 10
        - name: template
          in: query
          schema:
            type: string
        - name: release
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example: |
                  {
                    "data": {
                      "total": 69,
                      "items": [
                        {
                          "fullPath": "/horizon/tomv2v2",
                          "fullName": "horizon/tomv2v2",
                          "name": "tomv2v2",
                          "id": 193,
                          "groupID": 59,
                          "createdAt": "2022-10-14T11:51:24+08:00",
                          "updatedAt": "2022-10-18T21:42:28+08:00"
                        }
                      ]
                    }
                  }