# Copyright Â© 2023 Horizoncd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: 3.0.1
info:
  title: Horizon-Cluster-Restful
  version: 1.0.0
servers:
  - url: 'http://localhost:8080/'
paths:
  /apis/core/v1/applications/{applicationID}/clusters?environment={environment}&filter={filter}&pageNumber={pageNumber}&pageSize={pageSize}&tagSelector={tagSelector}:
    parameters:
      - name: applicationID
        in: path
        description: application id
        required: true
      - name: environment
        in: query
        description: environment name
        required: false
      - name: filter
        in: query
        description: filter clusters by name
      - name: pageNumber
        in: query
      - name: pageSize
        in: query
      - name: tagSelector
        in: query
        description: |
          filter clusters by tags, support operators: =, in, the comma separator acts as a logical AND (&&) operator. For example, if we want to filter clusters by tags(a equals to A and b equals to c or d), the tagSelector is "a=b,b in (c,d)"
    get:
      tags:
        - cluster
      operationId: listClusters
      summary: List clusters of a specified application
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data":{
                          "total":100,
                          "items":[
                              {
                                  "id":1,
                                  "name":"gitops-dg-online",
                                  "scope":{
                                      "environment":"online",
                                      "region":"dg"
                                  },
                                  "template":{
                                      "name":"javaapp",
                                      "release":"v1.0.0"
                                  }
                              }
                          ]
                      }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/applications/{applicationID}/clusters?scope={scope}&extraOwner={extraOwner}:
    parameters:
      - name: applicationID
        in: path
        description: application id
        required: true
      - name: scope
        in: query
        description: scope is environment/region, this value can not be edited after created.
        required: true
      - name: extraOwner
        in: query
        description: extra owner's email
        required: false
    post:
      tags:
        - cluster
      operationId: createCluster
      summary: Create a cluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: |
                {
                    "//name":"name is unique in the whole system, should satisfy the regex pattern: ^[a-z][a-z0-9-]*[a-z]$. And the length of name must less than 53",
                    "name":"cluster",
                    "description":"xxxxxxxxxxxx",
                    "expireTime":"48h0m0s",
                    "git":{
                        "//branch":"branch can be edited",
                        "//tag":"tag can be edited",
                        "//commit":"commit can be edited",
                        "branch":"develop"
                    },
                    "//tags": "tags is an array constructed by key-value pairs, key and value are must be string, and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$ ",
                    "tags": [
                      {
                        "key": "rpc.tag",
                        "value": "qa-abc"
                      }, {
                        "key": "dubble.tag",
                        "value": "qa-abc"
                      }
                    ],
                    "templateInput":{
                        "application":{
                            "app":{
                                "spec":{
                                    "replicas":1,
                                    "resource":"small"
                                },
                                "strategy":{
                                    "stepsTotal":1,
                                    "pauseType":"first"
                                },
                                "params":{
                                    "xmx":"512",
                                    "xms":"512",
                                    "maxPerm":"128",
                                    "mainClassName":"com.netease.horizon.WebApplication",
                                    "jvmExtra":"-Dserver.port=8080"
                                },
                                "health":{
                                    "check":"/api/test",
                                    "status":"/health/status",
                                    "online":"/health/online",
                                    "offline":"/health/offline",
                                    "port":8080
                                }
                            }
                        },
                        "pipeline":{
                            "buildxml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE project [<!ENTITY buildfile SYSTEM \"file:./build-user.xml\">]>\n<project basedir=\".\" default=\"deploy\" name=\"demo\">\n    <property name=\"ant\" value=\"ant\" />\n    <property name=\"baseline.dir\" value=\"${basedir}\"/>\n\n    <target name=\"package\">\n        <exec dir=\"${baseline.dir}\" executable=\"${ant}\" failonerror=\"true\">\n            <arg line=\"-buildfile overmind_build.xml -Denv=test -DenvName=mockserver.org\"/>\n        </exec>\n    </target>\n\n    <target name=\"deploy\">\n        <echo message=\"begin auto deploy......\"/>\n        <antcall target=\"package\"/>\n    </target>\n</project>"
                        }
                    }
                }
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
  /apis/core/v1/clusters/{clusterID}:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
    put:
      tags:
        - cluster
      operationId: updateCluster
      summary: Update a cluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: |
                {
                    "description":"xxxxxxxxxxxx",
                    "expireTime":"24h0m0s",
                    "template":{
                        "//release": "template release can be edited",
                        "release":"v1.1.0"
                    },
                    "//git": "git params can be edited",
                    "git":{
                        "url":"ssh://git@g.hz.netease.com:22222/music-cloud-native/horizon/horizon.git",
                        "subfolder":"/",
                        "branch":"develop"
                    },
                    "templateInput":{
                        "application":{
                            "app":{
                                "spec":{
                                    "replicas":1,
                                    "resource":"small"
                                },
                                "strategy":{
                                    "stepsTotal":1,
                                    "pauseType":"first"
                                },
                                "params":{
                                    "xmx":"512",
                                    "xms":"512",
                                    "maxPerm":"128",
                                    "mainClassName":"com.netease.horizon.WebApplication",
                                    "jvmExtra":"-Dserver.port=8080"
                                },
                                "health":{
                                    "check":"/api/test",
                                    "status":"/health/status",
                                    "online":"/health/online",
                                    "offline":"/health/offline",
                                    "port":8080
                                }
                            }
                        },
                        "pipeline":{
                            "buildxml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE project [<!ENTITY buildfile SYSTEM \"file:./build-user.xml\">]>\n<project basedir=\".\" default=\"deploy\" name=\"demo\">\n    <property name=\"ant\" value=\"ant\" />\n    <property name=\"baseline.dir\" value=\"${basedir}\"/>\n\n    <target name=\"package\">\n        <exec dir=\"${baseline.dir}\" executable=\"${ant}\" failonerror=\"true\">\n            <arg line=\"-buildfile overmind_build.xml -Denv=test -DenvName=mockserver.org\"/>\n        </exec>\n    </target>\n\n    <target name=\"deploy\">\n        <echo message=\"begin auto deploy......\"/>\n        <antcall target=\"package\"/>\n    </target>\n</project>"
                        }
                    }
                }
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
    get:
      tags:
        - cluster
      operationId: getCluster
      summary: Get a cluster
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data":{
                          "application":{
                              "id":2,
                              "name":"app"
                          },
                          "id":1,
                          "name":"cluster",
                          "fullPath": "/a/b/c",
                          "description":"xxxxxxxxxxxx",
                          "expireTime":"48h0m0s",
                          "priority":"P0",
                          "template":{
                              "name":"javaapp",
                              "release":"v1.1.0"
                          },
                          "latestDeployedCommit": "xxxxxx",
                          "image": "xxxx",
                          "git":{
                              "url":"ssh://git@g.hz.netease.com:22222/music-cloud-native/horizon/horizon.git",
                              "subfolder":"/",
                              "branch":"develop"
                          },
                          "scope":{
                              "environment":"test",
                              "region":"hz"
                          },
                          "createdAt": "2021-12-02T11:29:01+08:00",
                          "updatedAt": "2021-12-02T11:29:01+08:00",
                          "createdBy": {
                            "id": 1,
                            "name": "tony",
                            "email": "tony@corp.com"
                          },
                          "updatedBy": {
                             "id": 1,
                             "name": "tony",
                             "email": "tony@corp.com"
                           },
                          "status": "Freeing",
                          "templateInput":{
                              "application":{
                                  "app":{
                                      "spec":{
                                          "replicas":1,
                                          "resource":"small"
                                      },
                                      "strategy":{
                                          "stepsTotal":1,
                                          "pauseType":"first"
                                      },
                                      "params":{
                                          "xmx":"512",
                                          "xms":"512",
                                          "maxPerm":"128",
                                          "mainClassName":"com.netease.horizon.WebApplication",
                                          "jvmExtra":"-Dserver.port=8080"
                                      },
                                      "health":{
                                          "check":"/api/test",
                                          "status":"/health/status",
                                          "online":"/health/online",
                                          "offline":"/health/offline",
                                          "port":8080
                                      }
                                  }
                              },
                              "pipeline":{
                                  "buildxml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE project [<!ENTITY buildfile SYSTEM \"file:./build-user.xml\">]>\n<project basedir=\".\" default=\"deploy\" name=\"demo\">\n    <property name=\"ant\" value=\"ant\" />\n    <property name=\"baseline.dir\" value=\"${basedir}\"/>\n\n    <target name=\"package\">\n        <exec dir=\"${baseline.dir}\" executable=\"${ant}\" failonerror=\"true\">\n            <arg line=\"-buildfile overmind_build.xml -Denv=test -DenvName=mockserver.org\"/>\n        </exec>\n    </target>\n\n    <target name=\"deploy\">\n        <echo message=\"begin auto deploy......\"/>\n        <antcall target=\"package\"/>\n    </target>\n</project>"
                              }
                          }
                      }
                  }
    delete:
      tags:
        - cluster
      operationId: deleteCluster
      summary: Delete a cluster
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{clusterID}/free:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: freeCluster
      summary: Free a cluster
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{clusterID}/builddeploy:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: builddeploy
      summary: |
        Build and deploy for a cluster.
        This operation will create a pipelinerun for cluster.
        A cluster can only has one running pipelinerun.
        Return error if there exists a running pipelinerun already.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: |
                {
                    "title": "1.1 çæ¬åå¸",
                    "description": "xxxxxxxxxxxxxxx",
                    "git": {
                        "branch": "develop"
                    }
                }
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                    "data": {
                      "//id": "pipelinerun record id",
                      "pipelinerunID": 1000
                    }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{clusterID}/deploy:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: deploy
      summary: |
        Deploy for a cluster with no build.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: |
                {
                    "title": "1.1 çæ¬åå¸",
                    "description": "xxxxxxxxxxxxxxx"
                }
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                    "data": {
                      "//id": "pipelinerun record id",
                      "pipelinerunID": 1000
                    }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{clusterID}/rollback:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: rollback
      summary: Rollback a cluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: |
                {
                    "//pipelinerunID":"the pipelinerunID to rollback",
                    "pipelinerunID": 1000
                }
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                    "data": {
                      "//id": "pipelinerun record id",
                      "pipelinerunID": 1000
                    }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{clusterID}/restart:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: restart
      summary: Restart a cluster
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                    "data": {
                      "//id": "pipelinerun record id",
                      "pipelinerunID": 1000
                    }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{clusterID}/next:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: nextCluster
      summary: |
        Promote a cluster to next step.
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
  /apis/core/v1/clusters/{clusterID}/promote:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: promoteCluster
      summary: |
        Promote a cluster to skip all steps.
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
  /apis/core/v1/clusters/{clusterID}/pause:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: pauseCluster
      summary: |
        Pause a cluster.
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
  /apis/core/v1/clusters/{clusterID}/resume:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: resumeCluster
      summary: |
        Resume a paused cluster.
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{clusterID}/diffs?targetBranch={targetBranch}:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
      - name: targetBranch
        in: query
        description: targetBranch. If targetBranch is empty, codeDiff will not be returned.
        required: false
    get:
      tags:
        - cluster
      operationId: diffsOfCode
      summary: |
        Get code diffs of a cluster,
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data":{
                          "codeInfo":{
                              "Branch": "master"
                              "CommitMsg": "last commit msg"
                              "CommitID":"6cb5e13a2d3c59f2283fc6b52771729691aa9fc3"
                              "Link": https://g.hz.netease.com/music-cloud-native/horizon/horizon/-/commits/feature/applications
                          },
                          "configDiff ":"diff":"@@ -1,7 +1,7 @@\n metadata:\n   name: web-api\n   namespace: music-cicd\n-  charVersion: v2.7.3\n+  charVersion: v2.7.4\n \n replicaCount: 2\n \n"
                      }
                  }

  /apis/core/v1/clusters/{clusterID}/pipelineruns?pageNumber={pageNumber}&pageSize={pageSize}&canRollback={canRollback}:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
      - name: pageNumber
        in: query
        required: false
      - name: pageSize
        in: query
        required: false
      - name: canRollback
        in: query
        description: pipelinerun can rollback, true of false. Default is false
        required: false
    get:
      tags:
        - cluster
      operationId: getPipelineRuns
      summary: |
        List pipelineruns of a cluster.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data":{
                          "total":100,
                          "items":[
                              {
                                  "id":3,
                                  "title":"Feature123",
                                  "description":"release big rocket",
                                  "action":"builddeploy",
                                  "status":"ok",
                                  "gitURL":"ssh://git@cloudnative.com:22222/app/app-demo.git",
                                  "gitBranch":"master",
                                  "gitCommit":"4234324dsdjasljl43",
                                  "imageURL":"",
                                  "lastConfigCommit":"4234324dsdjasljl43",
                                  "configCommit":"4234324dsdjasljl43",
                                  "startedAt":"2021-11-07 11:19:54",
                                  "finishedAt":"2021-11-07 11:19:54",
                                  "//canRollback": "can this pipelinerun be rollbacked",
                                  "canRollback": true,
                                  "createBy":{
                                    "userID":0,
                                    "userName":"123"
                                  }
                              }
                          ]
                      }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{clusterID}/status:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
    get:
      tags:
        - cluster
      operationId: getClusterStatus
      summary: Get status of a cluster, return the pods and status
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                    "data":{
                      "runningTask":{
                        "//task":"build: building, deploy: deploying, none: no building and deploying",
                        "task":"build",
                        "//pipelinerunID": "This pipelinerunID can be used to get log, get status, etc.",
                        "pipelinerunID": 1000,
                        "//taskStatus":"Running, Pending, Succeeded, Cancelled, Failed. When task is noneï¼this field is empty",
                        "taskStatus":"Running"
                      },
                      "//ttlSeconds": "éç¾¤çå©ä½æ¶é´ï¼åä½ï¼s",
                      "ttlSeconds": "86400",
                      "//":"ä»»ä½æ¶åé½ä¼è¿åclusterStatuså­æ®µï¼è¯¥å­æ®µè¡¨ç¤ºéç¾¤å¨k8sä¸­çé¨ç½²ç¶æ",
                      "clusterStatus":{
                        "//status":"Progressing(æ­£å¨é¨ç½²), Healthy(é¨ç½²å®æ), Suspended(å·²æå), Degraded(å·²éçº§/å¤±è´¥), NotFound(æªé¨ç½²)",
                        "status":"Progressing",
                        "//step": "step represents the progress of the cluster",
                        "step": {
                          "//index": "current step index",
                          "index": 1,
                          "//total": "total step index",
                          "total": 3
                        },
                        "//podTemplateHash":"å½åææ°çReplicaSetå¯¹è±¡çpod template hash",
                        "podTemplateHash":"7b5c8d976d",
                        "//replicas":"éç¾¤ä¸­å®éè¿è¡çå¯æ¬æ°",
                        "replicas":2,
                        "//versions":"çæ¬è¯¦æ",
                        "versions":{
                          "//7b5c8d976d":"å ä¸ºä¸pod-template-hashçå¼ç¸åï¼è¯¥çæ¬æ¯è¦åçº§ççæ¬",
                          "7b5c8d976d":{
                            "//replicas":"å½åå¯æ¬æ°æ¯1",
                            "replicas":1,
                            "pods":{
                              "poc-javawebapp-test-2-7b5c8d976d-tjcrw":{
                                "metadata":{
                                  "//namespace":"å½åç©ºé´",
                                  "namespace":"test-1"
                                },
                                "spec":{
                                  "nodeName":"node-1",
                                  "initContainers":[
                                    {
                                      "name":"artifacts",
                                      "image":"habor-server/quku/music-stores-web:develop-122f9hbr-20201112144663"
                                    }
                                  ],
                                  "containers":[
                                    {
                                      "name":"app",
                                      "image":"harbor.mockserver.org/staffyun163music/cloudnative/template/tomcat7_jdk8:develop-r542525"
                                    }
                                  ]
                                },
                                "status":{
                                  "hostIP":"182.32.3.4",
                                  "podIP":"172.32.3.4",
                                  "//phase":"Podçç¶æä¸ºPending, Runningç­",
                                  "phase":"Pending",
                                  "//containerStatuses":"æ°éä¸ä¸é¢çsepc.containerså­æ®µä¸è´",
                                  "containerStatuses":[
                                    {
                                      "name":"app",
                                      "//ready":"å¦æReady=trueï¼ è¡¨ç¤ºPodå¤äºä¸çº¿ç¶æ; å¦æReady=falseï¼è¡¨ç¤ºPodå¤äºä¸çº¿ç¶æ",
                                      "ready":true,
                                      "//state":"stateè¡¨ç¤ºå®¹å¨çç¶æ",
                                      "state":{
                                        "//state":"å¯ä»¥æ¯running, waiting, terminated; å¦æstateæ¯running, reason å message ä¸ºç©º",
                                        "state":"running",
                                        "//reason":"å¦æ state æ¯ wating æterminated, è¿éä¼ç®è¦è¯´æåå ãç¨äºå±ç¤º",
                                        "reason":"",
                                        "//message":"å¦æ state æ¯ wating æterminated, è¿éä¼ç»åºå·ä½çåå ",
                                        "message":""
                                      }
                                    }
                                  ],
                                  "lifeCycle": [
                                    {
                                      "type": "PodSchedule",
                                      "status": "Success",
                                      "message": "",
                                      "completeTime": "2021-12-13T12:26:22Z"
                                    },
                                    {
                                      "type": "PodInitialize",
                                      "status": "Success",
                                      "message": "",
                                      "completeTime": "2021-12-13T12:26:27Z"
                                    },
                                    {
                                      "type": "ContainerStartup",
                                      "status": "Success",
                                      "message": "",
                                      "completeTime": null
                                    },
                                    {
                                      "type": "ContainerOnline",
                                      "status": "Success",
                                      "message": "",
                                      "completeTime": null
                                    },
                                    {
                                      "type": "HealthCheck",
                                      "status": "Success",
                                      "message": "",
                                      "completeTime": null
                                    }
                                  ],
                                  "//events":"äºä»¶ä¿¡æ¯ï¼ç¨äºåºéæ¶ææ¥é®é¢",
                                  "events":[
                                    {
                                      "//type":"Normal, Warning",
                                      "type":"Normal",
                                      "reason":"Pulling",
                                      "message":"Pulling image \"hub.c.163.com/commonwork/poc-templatm:tomcat7_jdk8\"",
                                      "count":85,
                                      "event-timestamp":"2020-10-13T17:02:01Z"
                                    },
                                    {
                                      "type":"Warning",
                                      "reason":"Failed",
                                      "message":"Error: ImagePullBackOff",
                                      "count":2003,
                                      "event-timestamp":"2020-10-13T17:02:01Z"
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "//5d9d5cc4fb":"å ä¸ºä¸pod-template-hashçå¼ä¸ç¸åï¼è¯¥çæ¬æ¯èçæ¬",
                          "5d9d5cc4fb":{
                            "replicas":2,
                            "pods":{
                              "poc-javawebapp-test-2-5d9d5cc4fb-5c7nl":{
                                "metadata":{
                                  "namespace":"test-1"
                                },
                                "spec":{
                                  "nodeName":"node-2",
                                  "initContainers":[
                                    {
                                      "name":"artifacts",
                                      "image":"habor-server/quku/music-stores-web:develop-122f9hbr-20201112144663"
                                    }
                                  ],
                                  "containers":[
                                    {
                                      "name":"app",
                                      "image":"harbor.mockserver.org/staffyun163music/cloudnative/template/tomcat7_jdk8:develop-r542525"
                                    }
                                  ]
                                },
                                "status":{
                                  "hostIP":"182.32.3.4",
                                  "podIP":"172.32.3.4",
                                  "phase":"Running",
                                  "containerStatuses":[
                                    {
                                      "name":"app",
                                      "ready":true,
                                      "state":{
                                        "running":{
                                          "startedAt":"2021-05-11T13:14:23Z"
                                        }
                                      }
                                    }
                                  ],
                                  "events":[

                                  ]
                                }
                              },
                              "poc-javawebapp-test-2-5d9d5cc4fb-lmqxn":{
                                "metadata":{
                                  "namespace":"test-1"
                                },
                                "spec":{
                                  "nodeName":"node-3",
                                  "initContainers":[
                                    {
                                      "name":"artifacts",
                                      "image":"habor-server/quku/music-stores-web:develop-122f9hbr-20201112144663"
                                    }
                                  ],
                                  "containers":[
                                    {
                                      "name":"app",
                                      "image":"harbor.mockserver.org/staffyun163music/cloudnative/template/tomcat7_jdk8:develop-r542525"
                                    }
                                  ]
                                },
                                "status":{
                                  "hostIP":"182.32.3.4",
                                  "podIP":"172.32.3.4",
                                  "phase":"Running",
                                  "containerStatuses":[
                                    {
                                      "name":"app",
                                      "ready":true,
                                      "state":{
                                        "running":{
                                          "startedAt":"2021-05-11T13:14:23Z"
                                        }
                                      }
                                    }
                                  ],
                                  "event":[

                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
  /apis/core/v1/clusters/{clusterID}/containerlog?podName={podName}&containerName={containerName}:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
      - name: podName
        in: query
        description: name of pod
        required: true
      - name: containerName
        in: query
        description: name of container
        required: true
    get:
      tags:
        - cluster
      operationId: getContainerLog
      summary: Get log of a cluster container
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                example: |
                  xxxxxxxxxxxx
                  xxxxxxxxxxxx
                  xxxxxxxxxxxx
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{clusterID}/online:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: online
      summary: online pod for cluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: |
                {
                  "podList": [
                     "poc-javaapp-test-2-8597696689-v6g8v",
                     "poc-javaapp-test-2-8597696689-v1g1y"
                  ]
                }
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                    "data": {
                      "//": "å¨è¯¥Podåï¼å½ä»¤æ§è¡æå, åªæstdoutå­æ®µåresultå­æ®µ",
                      "poc-javawebapp-test-2-8597696689-v6g8v": {
                        "//stdout": "stdoutæ¯æ§è¡å½ä»¤çæ åè¾åº",
                        "stdout": "do online",
                        "result": true
                      },
                      "//": "å¨è¯¥Podåï¼å½ä»¤æ§è¡å¤±è´¥, ä¸è¬å«æstdout æerror, ä¸å®ä¼æresultå­æ®µ",
                      "poc-javawebapp-test-2-8597696689-xxxxv": {
                        "//": "stderræ¯æ§è¡å½ä»¤çæ åéè¯¯è¾åº",
                        "stderr": "time out",
                        "result": false
                      },
                      "poc-javawebapp-test-2-8597696689-xxxxv": {
                        "//error": "ä¸åå½ä»¤çè¿ç¨ä¸­åºç°éè¯¯",
                        "error": {
                          "ErrStatus": {
                            "metadata": {},
                            "status": "Failure",
                            "message": "pods \"poc-javawebapp-test-2-8597696689-v6g8vs\" not found",
                            "reason": "NotFound",
                            "details": {
                              "name": "poc-javawebapp-test-2-8597696689-v6g8vs",
                              "kind": "pods"
                            },
                            "code": 404
                          }
                        },
                        "result": false
                      }
                    }
                  }
  /apis/core/v1/clusters/{clusterID}/pods?podName={podName}:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
    delete:
      tags:
        - cluster
      operationId: deletepod
      summary: delete pods of cluster
      response:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example:
                  {
                    "data": {
                      "pod1": {
                        "result": true
                      },
                      "pod2": {
                        "result": false,
                        "errorMsg": "why do we failed to delete this pod"
                      }
                    }
                  }
  /apis/core/v1/clusters/{clusterID}/offline:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: offline
      summary: offline pod for cluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: |
                {
                  "podList": [
                     "poc-javaapp-test-2-8597696689-v6g8v",
                     "poc-javaapp-test-2-8597696689-v1g1y"
                  ]
                }
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                    "data": {
                      "//": "å¨è¯¥Podåï¼å½ä»¤æ§è¡æå, åªæstdoutå­æ®µåresultå­æ®µ",
                      "poc-javawebapp-test-2-8597696689-v6g8v": {
                        "//stdout": "stdoutæ¯æ§è¡å½ä»¤çæ åè¾åº",
                        "stdout": "do offline",
                        "result": true
                      },
                      "//": "å¨è¯¥Podåï¼å½ä»¤æ§è¡å¤±è´¥, ä¸è¬å«æstdout æerror, ä¸å®ä¼æresultå­æ®µ",
                      "poc-javawebapp-test-2-8597696689-xxxxv": {
                        "//": "stderræ¯æ§è¡å½ä»¤çæ åéè¯¯è¾åº",
                        "stderr": "time out",
                        "result": false
                      },
                      "poc-javawebapp-test-2-8597696689-xxxxv": {
                        "//error": "ä¸åå½ä»¤çè¿ç¨ä¸­åºç°éè¯¯",
                        "error": {
                          "ErrStatus": {
                            "metadata": {},
                            "status": "Failure",
                            "message": "pods \"poc-javawebapp-test-2-8597696689-v6g8vs\" not found",
                            "reason": "NotFound",
                            "details": {
                              "name": "poc-javawebapp-test-2-8597696689-v6g8vs",
                              "kind": "pods"
                            },
                            "code": 404
                          }
                        },
                        "result": false
                      }
                    }
                  }
  /apis/core/v1/clusters/{clusterID}/events?podName={podName}:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
      - name: podName
        in: query
        description: name of pod
        required: true
    get:
      tags:
        - cluster
      operationId: getPodEvents
      summary: get events of pod
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data": [
                          {
                              "eventTimestamp": null,
                              "message": "Successfully assigned test-1/sph-xxxx-78dd96647c-szj2g to k8s1.cloudnative.org",
                              "reason": "Scheduled",
                              "type": "Normal"
                          },
                          {
                              "count": 1,
                              "eventTimestamp": "2021-11-24T12:54:10Z",
                              "message": "Started container sph-xxxx",
                              "reason": "Started",
                              "type": "Normal"
                          }
                      ]
                  }
  /apis/core/v1/clusters/{clusterID}/pods?start={start}&end={end}:
    parameters:
      - name: clusterID
        in: path
        description: id of cluster
        required: true
      - name: start
        in: query
        description: start timestamp(seconds) of the time range
        required: true
      - name: end
        in: query
        description: end timestamp(seconds) of the time range
        required: true
    get:
      tags:
        - cluster
      operationId: getClusterPods
      summary: get pods of the cluster in the given time range in grafana
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data": {
                        "pods": [
                          {
                            "pod": "123-xxx"
                          }
                        ]
                      }
                  }

  /apis/core/v1/clusters/{clusterID}/outputs:
    get:
      tags:
        - cluster
      operationId: getClusterOutputs
      summary: get cluster outputs
      responses:
        "200":
          description: Success
          content:
            application/yaml:
              schema:
                example: |
                  SyncDomainName:
                    Description: the sync domain of the the
                    Value: horizon.mockserver.org
                  DebugPort:
                    Description: the debug port
                    Value: 1000
  /apis/core/v1/clusters/{clusterID}/pod?podName=xxx:
    get:
      tags:
        - cluster
      operationId: getClusterPod
      summary: get cluster Pod with complete info from k8s
      responses:
        "200":
          description: Success
          content:
            application/yaml:
              schema:
                example: |
                  {
                      "data": {
                          "metadata": {
                              "name": "sph-test-6f94ff78bb-g6xr6",
                              "generateName": "sph-test-6f94ff78bb-",
                              "namespace": "dev-1",
                              "selfLink": "/api/v1/namespaces/dev-1/pods/sph-test-6f94ff78bb-g6xr6",
                              "uid": "61c18122-a49c-47bc-ad6f-8ae2152adc4a",
                              "resourceVersion": "476600208",
                              "creationTimestamp": "2022-07-27T09:46:38Z",
                              "labels": {
                                  "cloudnative.music.netease.com/application": "sph",
                                  "cloudnative.music.netease.com/cluster": "clustername",
                                  "cloudnative.music.netease.com/environment": "dev",
                                  "rollouts-pod-template-hash": "6f94ff78bb"
                              },
                          },
                          "spec": {
                              "volumes": [],
                              "initContainers": [],
                              "containers": [
                                  {
                                      "name": "sph-test",
                                      "image": "harbor.cloudnative.com/cloudnative-template/javaapp:v1.2.0",
                                      "env": [],
                                      "resources": {
                                          "limits": {
                                              "cpu": "1",
                                              "ephemeral-storage": "60Gi",
                                              "memory": "2Gi"
                                          },
                                          "requests": {
                                              "cpu": "250m",
                                              "ephemeral-storage": "128Mi",
                                              "memory": "769Mi"
                                          }
                                      },
                                      "volumeMounts": [],
                                      "terminationMessagePath": "/dev/termination-log",
                                      "terminationMessagePolicy": "File",
                                      "imagePullPolicy": "IfNotPresent",
                                      "securityContext": {
                                          "capabilities": {
                                              "add": [
                                                  "SYS_PTRACE"
                                              ]
                                          },
                                          "runAsUser": 10001,
                                          "runAsGroup": 10001
                                      }
                                  }
                              ],
                          }
                      }
                  }
  /apis/core/v1/clusters/{clusterID}/dashboards:
    get:
      tags:
        - cluster
      operationId: getGrafanaDashboards
      summary: get cluster's grafana dashboards
      responses:
        "200":
          description: Success
          content:
            application/yaml:
              schema:
                example: |
                  {
                      "data": {
                          "host:": "",
                          "params": {
                              "kiosk": "iframe"
                          },
                          dashboards: [{
                              title: "",
                              uid: "",
                              tags: [
                                  "default"
                              ]
                          }]
                      }
                  }
  /apis/core/v1/clusters:
    get:
      description: list cluster
      operationId: listClusters
      parameters:
        - name: userID
          in: query
          schema:
            type: number
        - name: applicationID
          in: query
          schema:
            type: number
        - name: filter
          in: query
          schema:
            type: string 
        - name: environment
          in: query
          schema:
            type: string
        - name: tagSelector
          in: query
          schema:
            type: string
        - name: template
          description: template name
          in: query
          schema:
            type: string
        - name: release
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: |
                {
                  "data": {
                    "total": 140,
                    "items": [
                      {
                        "id": 58694,
                        "name": "sph-sphtesttt",
                        "description": "",
                        "scope": {
                          "environment": "dev",
                          "region": "hz-dev2",
                          "regionDisplayName": "æ­å·å¼å"
                        },
                        "template": {
                          "name": "javaapp",
                          "release": "v0.0.0-sph-rc1"
                        },
                        "git": {
                          "sshURL": "ssh://git@cloudnative.com:22222/app/app-demo.git",
                          "httpURL": "https://cloudnative.com:22222/app/app-demo"
                        },
                        "createdAt": "2022-09-21T11:03:56+08:00",
                        "updatedAt": "2022-10-18T19:40:06+08:00",
                        "fullName": "gjq-test/sph/sph/sph-sphtesttt",
                        "fullPath": "/gjq-test/sph/sph/sph-sphtesttt"
                      }
                    ]
                  }
                }

